---
title: "Annotation de paires"
echo: false
image: spiderman.jpg
---

```{ojs}
d3 = require(await FileAttachment('/js/d3.min.js').url())
```

```{ojs}
inputs = require(await FileAttachment('/js/inputs.min.js').url())
```

```{ojs}
marked = require(await FileAttachment('/js/marked.min.js').url())
```

```{ojs}
htl = require(await FileAttachment('/js/htl.min.js').url())
```



```{ojs}
html`<div name="file-import">${viewof csvfile}</div>`
```

```{ojs}
html`<div name="colonnes-print">${viewof columns_to_show}</div>`
```

```{ojs}
//| echo: false
grid_two_dataframes = await html`<div style="
              background: #fff;
              margin: 0;
              border: none ;
              display: grid;
              width: ${screen.width};
              grid-template-areas: 
                'a b'
                'c c'
                'f d'
                'g g'
                'h h'
                'i i'
                'e e'
                ;
              grid-gap: 10px;
            ">
              <div name="a" style="grid-area: a; position: relative;">${viewof tt1}</div>
              <div name="b" style="grid-area: b; position: relative;">${viewof tt2}</div>
              <div name="c" style="grid-area: c; position: relative;">${viewof decision}</div>
              <div name="f" style="grid-area: f; position: relative;">${viewof text_input}</div>
              <div name="d" style="grid-area: d; position: relative;">${viewof count}</div>
              <div name="g" style="grid-area: g; position: relative;">${message_share}</div>
              <div name="h" style="grid-area: h; position: relative;">${progress}</div>
              <div name="i" style="grid-area: i; position: relative;">${message_final}</div>
              <div name="e" style="grid-area: e; position: relative;">${viewof download}</div>
            </div>`
```


```{ojs}
message_share = {
  if (share < 10){
    return md`Vous avez annot√© ${share}% des paires du fichier d'entr√©e`
  } else {
    return md`Bravo vous avez annot√© ${share}% des paires du fichier d'entr√©e`
  }
}
```

```{ojs}
progress = {
  const width = 360;
  const height = 20;
  const context = DOM.context2d(width, height);
  context.canvas.style.border = "solid 1px black";
  const i = width*(share/100);
  context.clearRect(0, 0, width, height);
  context.fillStyle = 'green'
  context.fillRect(0, 0, i, height);
  yield context.canvas;
}
```


```{ojs}
message_final = {
  if (share === 100){
    return md`__Vous avez annot√© l'ensemble de votre fichier üí™üéâ__`
  } else {
    return md``
  }
}
```

```{ojs}
md`${max_count} Annotation${max_count>1 ? 's' : ''}`
```


<!----------------------------------
import et manipulation des donn√©es
------------------------------------>


```{ojs}
db = DuckDBClient.of({
  match : await csvfile.csv()
})
```

```{ojs}
table_names = db.sql`SELECT column_name FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'match'`
column_names = table_names.flatMap(item => item.column_name)
```

```{ojs}
df = db.sql`SELECT * FROM match`
df_query = db.query(
  `SELECT ${columns_to_show.map(l => l + "_query").join(', ')} FROM match`
)
df_match = db.query(
  `SELECT ${columns_to_show.map(l => l + "_match").join(', ')} FROM match`
)
n_rows_sql = db.sql`SELECT COUNT(*) AS COUNT FROM match`
```

```{ojs}
n_rows = n_rows_sql[0]['COUNT']
max_count = Math.min(Number(n_rows),count)
current_row = Math.min(Number(n_rows)-1,count)
```

```{ojs}
unique_columns_dup = column_names.map(columnName => columnName.replace("_query", "").replace("_match", ""));
unique_columns = Array.from(new Set(unique_columns_dup))
```



<!----
widgets import
-------->

```{ojs}
viewof csvfile = Inputs.file({label: md`__Fichier √† annoter__ üìÅ ([Exemple ici](https://raw.githubusercontent.com/linogaliana/serverless-annotation-tool/master/example.csv))`, accept: ".csv", required: true})
```

{{< include _import.qmd >}}

<!----
barre de progr√®s et message
-------->

```{ojs}
share = Math.round(100*max_count/Number(n_rows))
```


<!----
export des annotations
-------->

```{ojs}
viewof filename_input = Inputs.text(
    {
      label: html`<b>Nom du fichier pour l'export</b>üìÅ`,
      placeholder: "annotations.json",
      value: "annotations.json"  
      }
)
```

```{ojs}
function serialize (data) {
 let s = JSON.stringify(data);
 return new Blob([s], {type: "application/json"}) 
}
```

```{ojs}
//| echo: false
viewof download = DOM.download(serialize(x), filename_input.replace(".json", ""), "Sauvegarder les annotations üëá dans un fichier")
```


<!-----
widget decision
------->

```{ojs}
viewof text_input = (count,
  Inputs.text(
    {label: html`<b>Raison de la d√©cision</b>`,
    //disabled: decision == null,
    placeholder: "Un texte explicatif"})
)
```

```{ojs}
decision_label = [
  {text: "Accepter üëçÔ∏è", color: "green", decision: "Accepted"},
  {text: "Rejeter üëéÔ∏è", color: "red", decision: "Rejected"},
  null
]
```

```{ojs}
viewof decision = (count, Inputs.radio(
  decision_label,
  {label: "D√©cision",
   format: x => (x == null) ? html`<span style="border-bottom: solid 2px blue; margin-bottom: -2px;">D√©cision √† prendre ü§î` : html`<span style="text-transform: capitalize; border-bottom: solid 2px ${x.color}; margin-bottom: -2px;">${x.text}`,
   value: null
  }
))
```


```{ojs}
viewof count = Inputs.button("Valider !")
```

<!--------
formattage des tableaux
---------->

{{< include _widgets.qmd >}}

<!-----------
double tableau
-------------->

```{ojs}
array1 = reshape_row(df_query[current_row])
array2 = reshape_row(df_match[current_row])
```

```{ojs}
colors_data1 = create_color_mapping(array1, array2)
colors_data2 = create_color_mapping(array2, array1)
```


```{ojs}
viewof tt1 = table_pairs(
  array1, colors_data1, 
  {"value": "Valeur observ√©e", "column": "Variable d'int√©r√™t"},
  ["column", "value"]
)
```

```{ojs}
viewof tt2 = table_pairs(
  array2, colors_data2, 
   {"value": "Paire potentielle"},
   ["value"]
)
```

<!-----------
dataframe final
-------------->

```{ojs}
viewof final_table = Inputs.table(
  x,
  {format: {
      "similarity": d => color_accepted(d)
  }
  })
```


<!--------------------
update du fichier annotation
---------------------->

```{ojs}
d = [];
function push_mutable(d){
  if (decision !== null) {
    if (d.some(element => element.count === current_row)){
      const index_replace = d.findIndex(element => element.count === current_row);
      d[index_replace] = d_row ;
    } else{
      d.push(d_row);
    }
    }
  return d ;
}
x = push_mutable(d)
```


```{ojs}
d_row = {
  // Assuming `count` and `data_pairs` are already defined
  const newElement = { ...df[current_row] }; // Create a shallow copy of the original element

  if (decision !== null) {
    newElement.similarity = decision.decision; // Update the "field" property with the value of `decision.decision`
    newElement.justification = "no decision yet" ;
    newElement.count = current_row ;
  } else {
    newElement.count = current_row ;
    newElement.similarity = "no decision yet"; // Set the "field" property to "nothing" if `decision.decision` is null
    //newElement.justification = text_input ;
  }

  return newElement;
}
```

```{ojs}
//| output: false
{
  if (x[current_row]) {
    x[current_row].justification = text_input ;
  }
}
```
