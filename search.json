[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Annotation de fichiers",
    "section": "",
    "text": "viewof columns_to_show = Inputs.checkbox(unique_columns, {label: \"Colonnes √† afficher\", value: unique_columns})\n\n\n\n\n\n\n\ngrid_two_dataframes = html`&lt;div style=\"\n            background: #fff;\n            margin: 0;\n            border: none ;\n            display: grid;\n            width: ${screen.width};\n            grid-template-areas: \n              'a b'\n              'c c'\n              'f f'\n              'd d'\n              'e e';\n            grid-gap: 10px;\n          \"&gt;\n            &lt;div name=\"a\" style=\"grid-area: a; position: relative;\"&gt;${viewof tt1}&lt;/div&gt;\n            &lt;div name=\"b\" style=\"grid-area: b; position: relative;\"&gt;${viewof tt2}&lt;/div&gt;\n            &lt;div name=\"f\" style=\"grid-area: f; position: relative;\"&gt;${viewof text_input}&lt;/div&gt;\n            &lt;div name=\"c\" style=\"grid-area: c; position: relative;\"&gt;${viewof decision}&lt;/div&gt;\n            &lt;div name=\"d\" style=\"grid-area: d; position: relative;\"&gt;${viewof count}&lt;/div&gt;\n            &lt;div name=\"e\" style=\"grid-area: e; position: relative;\"&gt;${viewof download}&lt;/div&gt;\n          &lt;/div&gt;`\n\n\n\n\n\n\n\nviewof text_input = (count,\n  Inputs.text({label: html`&lt;b&gt;Raison de la d√©cision&lt;/b&gt;`, placeholder: \"Un texte explicatif\"})\n)\n\n\n\n\n\n\n\n\n{\n  if (share &lt; 10){\n    return md`Vous avez annot√© ${share}% des paires du fichier d'entr√©e`\n  } else {\n    return md`Bravo vous avez annot√© ${share}% des paires du fichier d'entr√©e`\n  }\n}\n\n\n\n\n\n\n\nshare = Math.round(100*count/Number(n_rows))\nhtml`&lt;div style=\"background:green;width:${share}%;height:33px;\"&gt;`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nviewof download = DOM.download(serialize(d), null, \"Sauvegarder les annotations üëá dans un fichier\")\n\n\n\n\n\n\n\narray1 = reshape_row(df_query[count])\narray2 = reshape_row(df_match[count])\n\nfunction create_color_mapping(array1, array2) {\n  const mapping = {};\n  array1.forEach((obj1, index) =&gt; {\n    const obj2 = array2[index];\n    const key = obj1.value; // Use obj1.value as the key\n\n    if (obj1.value === obj2.value) {\n      mapping[key] = \"#5f9c5f\";\n    } else {\n      mapping[key] = \"#fc4747\";\n    }\n  });\n  return mapping\n}\n\nfunction create_color_map(key, array1) {\n  const value = array1[key];\n  const backgroundColor = value ;\n  return html`&lt;div style=\"background: ${backgroundColor};text-align:right;padding:2px 5px;\"&gt;${key}&lt;/div&gt;`;\n}\nfunction create_variable_row(d){\n  const d_nice = d.replace(\"_query\", \"\").capitalize().replace(\"_\", \" \") ;\n  return html`&lt;b&gt;${d_nice}&lt;/b&gt;`;\n}\n\ncolors_data1 = create_color_mapping(array1, array2)\ncolors_data2 = create_color_mapping(array2, array1)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nviewof tt1 = Inputs.table(\n  reshape_row(\n    df_query[count]\n  ),\n    {\n    format: {\n      \"value\": d =&gt; create_color_map(d, colors_data1),\n      \"column\": d =&gt; create_variable_row(d)\n      },\n    header: {\"value\": \"Valeur observ√©e\", \"column\": \"Variable d'int√©r√™t\"}\n  }\n)\n\n\n\n\n\n\n\nviewof tt2 = Inputs.table(\n  reshape_row(df_match[count]),\n  {\n    columns: [\"value\"],\n    format: {\"value\": d =&gt; create_color_map(d, colors_data2) },\n    header: {\"value\": \"Paire potentielle\"}\n  }\n)\n\n\n\n\n\n\n\nurl_file = \"https://raw.githubusercontent.com/J535D165/recordlinkage-annotator/master/examples/annotation_dishonesty.json\"\ndata_pairs = d3.json(\n  url_file\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndecision_label = [\n  {text: \"Accepter üëçÔ∏è\", color: \"green\", decision: \"Accepted\"},\n  {text: \"Rejeter üëéÔ∏è\", color: \"red\", decision: \"Rejected\"},\n  null\n]\n\n\n\n\n\n\n\nviewof decision = (count, Inputs.radio(\n  decision_label,\n  {label: \"D√©cision\",\n   format: x =&gt; (x == null) ? html`&lt;span style=\"border-bottom: solid 2px blue; margin-bottom: -2px;\"&gt;D√©cision √† prendre ü§î` : html`&lt;span style=\"text-transform: capitalize; border-bottom: solid 2px ${x.color}; margin-bottom: -2px;\"&gt;${x.text}`,\n   value: null\n  }\n))\n\n\n\n\n\n\n\nviewof count = Inputs.button(\"Nouvel exemple √† annoter !\")\n\n\n\n\n\n\n\n\nmd`${count} Annotation${count&gt;1 ? 's' : ''}`\n\n\n\n\n\n\n\nfunction color_accepted(d) {\n  const backgroundColor = d === \"Accepted\" ? \"#5f9c5f\" : \"#fc4747\";\n  return html`&lt;div style=\"background: ${backgroundColor};text-align:right;padding:2px 5px;\"&gt;${d}&lt;/div&gt;`;\n}\n\n\n\n\n\n\n\nInputs.table(\n  x,\n  {format: {\n      \"similarity\": d =&gt; color_accepted(d)\n  }\n  })\n\n\n\n\n\n\n\nd = [];\nfunction push_mutable(d){\n  if (decision !== null) {\n    if (d.some(element =&gt; element.count === count)){\n      const index_replace = d.findIndex(element =&gt; element.count === count);\n      d[index_replace] = d_row ;\n    } else{\n      d.push(d_row);\n    }\n    }\n  return d ;\n}\nx = push_mutable(d)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nd_row = {\n  // Assuming `count` and `data_pairs` are already defined\n  const newElement = { ...df[count] }; // Create a shallow copy of the original element\n\n  if (decision !== null) {\n    newElement.similarity = decision.decision; // Update the \"field\" property with the value of `decision.decision`\n    newElement.justification = text_input ;\n    newElement.count = count ;\n  } else {\n    newElement.count = count ;\n    newElement.similarity = \"no decision yet\"; // Set the \"field\" property to \"nothing\" if `decision.decision` is null\n    newElement.justification = text_input ;\n  }\n\n  return newElement;\n}\n\n\n\n\n\n\n\nfunction serialize (data) {\n let s = JSON.stringify(data);\n return new Blob([s], {type: \"application/json\"}) \n}\n\n\n\n\n\n\n\ndb = DuckDBClient.of({\n  match : await FileAttachment(\"example.csv\")\n})\n\n\n\n\n\n\n\ntable_names = db.sql`SELECT column_name FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'match'`\ncolumn_names = table_names.flatMap(item =&gt; item.column_name)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndf = db.sql`SELECT * FROM match`\ndf_query = db.query(\n  `SELECT ${columns_to_show.map(l =&gt; l + \"_query\").join(', ')} FROM match`\n)\ndf_match = db.query(\n  `SELECT ${columns_to_show.map(l =&gt; l + \"_match\").join(', ')} FROM match`\n)\nn_rows_sql = db.sql`SELECT COUNT(*) AS COUNT FROM match`\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nn_rows = n_rows_sql[0]['COUNT']\n\n\n\n\n\n\n\nunique_columns_dup = column_names.map(columnName =&gt; columnName.replace(\"_query\", \"\").replace(\"_match\", \"\"));\nunique_columns = Array.from(new Set(unique_columns_dup))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction reshape_row(row) {\n  return Object.entries(row).map(([column, value]) =&gt; ({ column, value }));\n}\n\n\n\n\n\n\n\nObject.defineProperty(String.prototype, 'capitalize', {\n  value: function() {\n    return this.charAt(0).toUpperCase() + this.slice(1);\n  },\n  enumerable: false\n});"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "A propos",
    "section": "",
    "text": "Prototype de site r√©actif pour annoter des paires d‚Äôappariement"
  }
]